import { fastify } from '@root/index';

// create full crud methods for Vulnerability prisma model similar to User, Alert, and Log

export async function list(req, reply) {
  const vulnerabilities = await fastify.prisma.vulnerability.findMany();

  if (!vulnerabilities) {
    return reply.status(400).send('Vulnerabilities not found');
  }

  return reply.status(200).send(vulnerabilities);
}

export async function create(req, reply) {
  const vulnerability = await fastify.prisma.vulnerability.create({
    data: {
      name: req.body.name,
      description: req.body.description,
      severity: req.body.severity,
    },
  });

  if (!vulnerability) {
    return reply.status(400).send('Vulnerability not created');
  }

  return reply.status(200).send(vulnerability);
}

export async function view(req, reply) {
  const vulnerability = await fastify.prisma.vulnerability.findUnique({
    where: { id: req.params.id as string },
  });

  if (!vulnerability) {
    return reply.status(400).send('Vulnerability not found');
  }

  return reply.status(200).send(vulnerability);
}

export async function update(req, reply) {
  const vulnerability = await fastify.prisma.vulnerability.update({
    where: { id: req.params.id as string },
    data: {
      name: req.body.name,
      description: req.body.description,
      severity: req.body.severity,
    },
  });

  if (!vulnerability) {
    return reply.status(400).send('Vulnerability not updated');
  }

  return reply.status(200).send(vulnerability);
}

export async function deleteOne(req, reply) {
  const vulnerability = await fastify.prisma.vulnerability.delete({
    where: { id: req.params.id as string },
  });

  if (!vulnerability) {
    return reply.status(400).send('Vulnerability not deleted');
  }

  return reply.status(200).send(vulnerability);
}

export const vulnerabilityControllers = {
  list,
  create,
  view,
  update,
  deleteOne,
};
