generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model to store information about users
model User {
  id        String     @id @default(uuid()) @map("_id")
  email     String
  password  String
  roles     Role[]
  logs      Log[]
  alerts    Alert[]
  incidents Incident[]

  @@index([email], name: "emailIndex")
}

// Role model to store different roles a user can have
model Role {
  id     String @id @default(uuid()) @map("_id")
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([name], name: "roleIndex")
}

model Log {
  id      String   @id @default(uuid()) @map("_id")
  message String
  level   LogLevel
  user    User     @relation(fields: [userId], references: [id])
  userId  String

  @@index([level], name: "logLevelIndex")
}

// Alert model to store alerts
model Alert {
  id         String     @id @default(uuid()) @map("_id")
  message    String
  level      AlertLevel
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  Incident   Incident?  @relation(fields: [incidentId], references: [id])
  incidentId String?

  @@index([level], name: "alertLevelIndex")
}

// Incident model to store cybersecurity incidents
model Incident {
  id              String         @id @default(uuid()) @map("_id")
  title           String
  status          IncidentStatus
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  alerts          Alert[]
  Vulnerability   Vulnerability? @relation(fields: [vulnerabilityId], references: [id])
  vulnerabilityId String?

  @@index([status], name: "incidentStatusIndex")
}

// Vulnerability model to store known vulnerabilities
model Vulnerability {
  id          String                @id @default(uuid()) @map("_id")
  name        String
  description String
  severity    VulnerabilitySeverity
  incidents   Incident[]

  @@index([severity], name: "vulnerabilitySeverityIndex")
}

// Asset model to store assets like servers, workstations, etc.
model Asset {
  id            String          @id @default(uuid()) @map("_id")
  name          String
  type          AssetType
  Configuration Configuration[]

  @@index([type], name: "assetTypeIndex")
}

// Configuration model to store system configurations
model Configuration {
  id      String @id @default(uuid()) @map("_id")
  name    String
  value   String
  asset   Asset  @relation(fields: [assetId], references: [id])
  assetId String
}

enum LogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}

enum AlertLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum VulnerabilitySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AssetType {
  SERVER
  WORKSTATION
  NETWORK_DEVICE
  OTHER
}
